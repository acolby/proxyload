import fs from "node:fs";
import path from "node:path";

export default async function barrel(params: {
  exclude: string[];
  dir: string;
}) {
  const { dir } = params;
  const types = fs
    .readdirSync(dir)
    .filter((name) => !name.includes("."))
    .filter((name) => !params.exclude.includes(name));

  for (const type of types) {
    const names = fs
      .readdirSync(path.resolve(dir, type))
      .filter((name) => !name.includes("."));

    const items = names.map((name) => {
      const variations = fs
        .readdirSync(path.resolve(dir, type, name))
        .filter((name) => !name.includes("."));
      return { name, variations };
    });

    await _writeFileIfChanged(
      path.resolve(`${dir}/${type}/index.ts`),
      _createBarrelFile({
        type,
        items,
      })
    );

    await _writeFileIfChanged(
      path.resolve(`${dir}/index.ts`),
      _createTopLevelBarrelFile({
        types,
      })
    );
  }
}

async function _writeFileIfChanged(
  filePath: string,
  content: string
): Promise<void> {
  try {
    // Check if file exists and read current content
    const existingContent = fs.existsSync(filePath)
      ? fs.readFileSync(filePath, "utf-8")
      : null;

    // Only write if content has changed or file doesn't exist
    if (existingContent !== content) {
      await fs.promises.writeFile(filePath, content, "utf-8");
    }
  } catch (error) {
    console.error(`Error writing file ${filePath}:`, error);
    throw error;
  }
}

function _createBarrelFile(params: {
  type: string;
  items: { name: string; variations: string[] }[];
}) {
  const { items } = params;
  const imports: string[] = [];

  // import the interface types
  for (const item of items) {
    // Add import statements
    imports.push(
      `export { default as ${item.name} } from "./${item.name}/default";`
    );
  }

  // Generate the complete file content
  const fileContent = `// This file was generated by proxyload

${imports.join("\n")}
`;

  return fileContent;
}

function _createTopLevelBarrelFile(params: { types: string[] }) {
  const { types } = params;
  const imports: string[] = [];

  // import the interface types
  for (const type of types) {
    // Add import statements
    imports.push(`export * as ${type} from "./${type}";`);
  }

  const fileContent = `// This file was generated by proxyload

${imports.join("\n")}
`;

  return fileContent;
}
